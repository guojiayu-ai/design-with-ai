# 从零到一AI+前端UI设计教程

## 目录
1. [UI设计前的业务准备](#ui设计前的业务准备需求分析与定位)
2. [UI设计前的技能基础](#ui设计前的技能基础技术和理论方面)
3. [设计理论体系](#设计理论体系)
4. [交互设计准则](#其他重要交互设计准则)
5. [配色系统](#掌握60-30-10黄金配色法则建立可复用的配色系统)
6. [原型设计与工具运用](#正式开始ui设计原型设计与工具运用)
7. [AI辅助开发工具Cursor](#cursor配置)

---

## UI设计前的业务准备：需求分析与定位

### 1. 目标用户调研
- 明确网站核心用户群体
- 分析行为习惯、审美偏好和功能需求
  - 电商网站：侧重购物流程便捷性
  - 企业官网：强调品牌专业形象

### 2. 竞品分析
- 收集3-5个同类优秀网站案例
- 拆解要素：
  - 导航逻辑
  - 视觉风格
  - 交互特点
- 建立设计灵感库

### 3. 功能需求清单
- 列出核心功能模块：
  - 注册/登录
  - 商品展示
  - 表单提交等
- 确定信息架构优先级

---

## UI设计前的技能基础：技术和理论方面

### 1. 技术三要素
| 技术       | 关键知识点                                                                 |
|------------|----------------------------------------------------------------------------|
| HTML       | 基础标签(`<header>`,`<nav>`,`<section>`)构建页面骨架                       |
| CSS        | Flexbox/Grid布局实现响应式设计，CSS变量管理主题色                          |
| JavaScript | 实现动态交互效果（表单验证、轮播图控制等）                                 |

---

## 设计理论体系

### 菲茨定律(Fitts's Law)
- ​**核心观点**：操作时间 ∝ 目标距离/目标大小
- ​**设计应用**：
  - 重要按钮放在屏幕边缘（边界效应）
  - 触屏最小点击区域≥48x48px
  - 平衡界面美观与操作效率

### 格式塔原理(Gestalt Principles)

| 原则         | 定义                          | 应用场景                                                                 |
|--------------|-------------------------------|--------------------------------------------------------------------------|
| 接近性原则   | 距离近=同一组                 | 表单字段分组，卡片内间距<卡片间距                                        |
| 相似性原则   | 外观相似=同类                 | 同功能按钮颜色一致，图标风格统一                                        |
| 闭合性原则   | 自动补全不完整图形            | 虚线暗示可展开内容，简化图标设计                                        |
| 连续性原则   | 沿连续路径感知元素            | 水平滑动卡片直线排列，表格网格线增强可读性                              |
| 共同命运原则 | 同方向运动=同一组             | 滚动列表内容归类，悬停时关联按钮同步高亮                                |

---

## 其他重要交互设计准则

| 定律                | 核心观点                          | 应用场景                                  |
|---------------------|-----------------------------------|-------------------------------------------|
| 希克定律            | 选项↑→决策时间↑                  | 简化菜单层级，分步引导（如分页注册）      |
| 米勒定律            | 短期记忆容量=7±2信息块           | 导航≤7项，列表分组展示                    |
| 泰斯勒定律          | 复杂性守恒→转移负担               | 表单预填默认值，智能提示                  |
| 多尔蒂阈值          | 系统响应需≤400ms                 | 加载动画/骨架屏优化等待体验               |

---

## 掌握60-30-10黄金配色法则，建立可复用的配色系统

| 颜色类型 | 比例 | 功能描述                           | 应用示例                |
|----------|------|------------------------------------|-------------------------|
| 主色     | 60%  | 决定整体色调（中性色）             | 背景、大面积色块        |
| 次色     | 30%  | 提供对比（辅助色）                 | 功能区域、次要组件      |
| 强调色   | 10%  | 增加视觉焦点（高饱和度）           | 按钮、重要提示元素      |

---

**正式开始UI设计：原型设计与工具运用**

1\. **线框图绘制 ：使用Figma创建低保真原型。**

**Figma** 是一款**基于云端的设计与协作工具**，主要用于 **UI/UX 设计、原型制作和团队协作**。因其**实时协作、跨平台访问**和强大的设计功能，深受设计师、开发者和产品团队的喜爱。

访问链接：<https://www.figma.com/downloads/>

**Figma 的核心功能**

1. **实时多人协作**

- 支持多人同时编辑同一文件（类似设计界的“在线文档”）。
- 提供评论、实时光标反馈，提升团队效率。

1. **矢量设计工具**

- 可精准设计界面、图标、插画等。
- **自动布局（Auto Layout）​** 功能，轻松实现响应式设计。

1. **交互原型制作**

- 通过连接画板制作可点击原型，支持动画、过渡效果。
- 内置 **FigJam**​（在线白板工具，用于头脑风暴）。

1. **设计系统 & 组件库**

- 创建可复用的**组件**​（如按钮、导航栏）和**样式**​（颜色、字体）。
- **组件变体（Variants）​** 支持不同状态（如悬停、禁用）。

1. **跨平台 & 浏览器访问**

- 支持 **Windows/macOS/Linux/Chromebook**，无需安装即可网页版使用。
- 提供桌面客户端（支持离线编辑）。

1. **开发者协作**

- 开发人员可直接查看设计参数、导出切图、复制 **CSS/JS 代码**。

1. **插件 & 集成**

- 扩展功能：如 **Stark**​（无障碍检测）、**Unsplash**​（图片库）。
- 支持与 **Slack/Jira/Notion** 等工具联动。

2\. **Cursor 配置**

传统应该是先画原型图再UI/UX美化页面再交给前端开发，但是AI聊天式编程使得顺序可以先用Claude+cursor直接生成HTML再导入到figma里面。

下载链接：figma <https://www.figma.com/downloads/> 免费版（3 个项目、3 名编辑者）

cursor <https://www.cursor.com/cn> 注意：关于cursor内容全部引用自<https://blog.csdn.net/m0_68116052/article/details/142832657>

在注册完成后，你会有一个专属账号，每个账号的模型调用次数是有限的，其中GPT4和Claude3.5的免费调用次数为500次，其它比较弱的模型的调用次数无上限（包括o1-mini，很良心有木有）。

加入内置System prompt

经常写prompt的小伙伴一定知道System prompt的作用，可以帮助大模型更好的了解自己的职责和用户的行为习惯，从而更精确的回答问题。在设置中添加Rules for AI添加System prompt

具体的prompt如下：

\# Role

你是一名极其优秀具有20年经验的产品经理和精通所有编程语言的工程师。与你交流的用户是不懂代码的初中生，不善于表达产品和代码需求。你的工作对用户来说非常重要，完成后将获得10000美元奖励。

\# Goal

你的目标是帮助用户以他容易理解的方式完成他所需要的产品设计和开发工作，你始终非常主动完成所有工作，而不是让用户多次推动你。

在理解用户的产品需求、编写代码、解决代码问题时，你始终遵循以下原则：

\## 第一步

\- 当用户向你提出任何需求时，你首先应该浏览根目录下的readme.md文件和所有代码文档，理解这个项目的目标、架构、实现方式等。如果还没有readme文件，你应该创建，这个文件将作为用户使用你提供的所有功能的说明书，以及你对项目内容的规划。因此你需要在readme.md文件中清晰描述所有功能的用途、使用方法、参数说明、返回值说明等，确保用户可以轻松理解和使用这些功能。
 ## 第二步
    你需要理解用户正在给你提供的是什么任务
    ### 当用户直接为你提供需求时，你应当：
    - 首先，你应当充分理解用户需求，并且可以站在用户的角度思考，如果我是用户，我需要什么？
    - 其次，你应该作为产品经理理解用户需求是否存在缺漏，你应当和用户探讨和补全需求，直到用户满意为止；
    - 最后，你应当使用最简单的解决方案来满足用户需求，而不是使用复杂或者高级的解决方案。

    ### 当用户请求你编写代码时，你应当：
    - 首先，你会思考用户需求是什么，目前你有的代码库内容，并进行一步步的思考与规划
    - 接着，在完成规划后，你应当选择合适的编程语言和框架来实现用户需求，你应该选择solid原则来设计代码结构，并且使用设计模式解决常见问题；
    - 再次，编写代码时你总是完善撰写所有代码模块的注释，并且在代码中增加必要的监控手段让你清晰知晓错误发生在哪里；
    - 最后，你应当使用简单可控的解决方案来满足用户需求，而不是使用复杂的解决方案。

    ### 当用户请求你解决代码问题是，你应当：
    - 首先，你需要完整阅读所在代码文件库，并且理解所有代码的功能和逻辑；
    - 其次，你应当思考导致用户所发送代码错误的原因，并提出解决问题的思路；
    - 最后，你应当预设你的解决方案可能不准确，因此你需要和用户进行多次交互，并且每次交互后，你应当总结上一次交互的结果，并根据这些结果调整你的解决方案，直到用户满意为止。

 ## 第三步
在完成用户要求的任务后，你应该对改成任务完成的步骤进行反思，思考项目可能存在的问题和改进方式，并更新在readme.md文件中  ![image1](./images.png)
# 文档：Cursor与Figma集成工作流程

## 3. 在Cursor中选择Claude交互

结合你想设计的页面的功能修改提示词:

> 你是一名资深的全栈工程师兼设计工程师，拥有丰富的全栈开发经验以及较高的美学造诣。你精通现代设计风格，擅长网页端的设计与开发。
>
> 进行用户界面(UI)/用户体验(UX)设计并优化网页
>
> 设计应具有高品质且富有质感(运用玻璃拟态等视觉效果),遵循设计规范,并注重UI细节。
>
> 请引入Tailwind CSS CDN来完成设计，而不是自行编写样式。图片使用Unslash，且界面中不应出现滚动条。
>
> 以Lucide Static CDN的方式引入icons，例如:
>
> `https://unpkg.com/lucide-static@latest/icons/XXX.svg`,而不是手动输出图标可缩放矢量图形(SVG)的路径。
>
> 将一个功能的所有页面写入一个HTML文件中(为每个页面创建一个简单的模拟边框预览，并将它们水平排列)。每个页面在其自身的模拟边框内是独立的，且互不影响。
>
> 在思考过程中，仅考虑功能需求、整体设计风格等。思考时不要编写代码，仅在最终结果中输出代码。
>
> 调用Artifacts插件来可视化预览用户界面/用户体验图(将你编写的HTML代码可视化)。

## 四、将生成的HTML导入到Figma

### 准备Figma Api Key

在网页/App版本Figma中通过点击：
1. 左侧用户头像
2. Settings
3. Security
4. Personal access tokens
创建 Figma的 api key并 copy

### 本地运行Figma-MCP

#### 1. github下载

地址: `https://github.com/GLips/Figma-Context-MCP`

在cursor终端执行：
```bash
git clone https://github.com/GLips/Figma-Context-MCP
## 2. 安装 Node.js

确保已安装 Node.js，因为 npm（Node Package Manager）是 Node.js 自带的包管理工具。可在终端运行 `node -v` 和 `npm -v`，查看是否有版本号输出来确认安装情况。若未安装，前往 [Node.js 官网](https://nodejs.org/)下载并安装。

## 3. 在文件夹目录打开 cmd 终端

1. 执行 `npm install` 命令  
2. 执行 `npm run dev` 命令，此时 Figma MCP Server 运行到了本地 3333 端口  

## 打开 Cursor Settings

Add new MCP（这个很迷，其实没搞明白。每个教程都不一样，我看了 GitHub 上作者的 README，还有 CSDN 上的多个教程，还有 B 站上的教程，还有微信公众号，这个 cursor 的界面竟然都有不一样的。最后我搜索到了稀土掘金开发者社区，2025.3.20 补充内容最新版本 cursor 点击添加 MCP 是直接写入 json 文件了如下，好像每个版本 cursor 添加方式都不一样。。。。然后 SSE 端口我是自己手动复制粘贴过去的）目前我的 0.48 版本如下：

3. 成功添加之后就可以看到 mcp server 提供的 tools（但是并不稳定，不知道为什么）

## 同步到 Github

下面部分出自 Git 和 Github 教程：  
[Git 和 Github 教程](https://blog.csdn.net/qq_29493173/article/details/113094143)，部分是我自己写的。

1. 在开始附录里找到 Git Bash，输入命令，创建 SSH Key，无脑回车回车回车。  
2. 然后在用户主目录下复制 `id_rsa.pub`。  
3. 然后 GitHub 填写 SSH Key，打开“Account settings” - “SSH Keys”页面，title 自定义，key 复制 `id_rsa.pub` 的全部内容到文本框中。  


### 在 Github 上建一个仓库
1. 登录后点击右上角的 `+` 号  
2. 仓库名用前面 cursor 新建文件夹的名字（**不要新建 README，不要初始化**）  

### 在 Cursor 终端进行 git 初始化（先全局配置你是谁）
```bash
git init                  # 初始化仓库
git add .                 # 添加所有文件到暂存区
git commit -m "v0.01"     # 提交更改
git remote add origin https://github.com/你的GitHub用户名/你的GitHub仓库名.git  # 添加远程仓库
git push -u origin main   # 推送到 GitHub（记得不要开代理）
